//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : E-Healthcare-Canada
//  @ File Name : ListContainer.h
//  @ Date : 11/9/2010
//  @ Author : 
//
//


#if !defined(_LISTCONTAINER_H)
#define _LISTCONTAINER_H

#include <QList>
#include <QStringList>
#include <QFile>
#include <QMessageBox>
#include <QString>
#include <QTextStream>
#include <QDebug>
#include <QMultiMap>

#include "../Common/include/DiseaseCase.h"
#include "include/DiseaseCriteria.h"
#include "SupplyCriteria.h"
#include "ShipmentCriteria.h"
#include "../Common/include/DiseaseType.h"
#include "User.h"
#include "../Common/include/SupplyType.h"
#include "../Common/include/Supply.h"
#include "../Common/include/Shipment.h"
#include "../Common/include/City.h"

/// COMMENT OUT THE QList INHERITANCE SINCE IT DOES NOT WORK



class ListContainer : public QWidget
{
    Q_OBJECT
public:
    ListContainer();
    ~ListContainer();

    bool addDiseaseCase(DiseaseCase* diseaseCase);
    bool addToSupply(Supply* aSupply);
    bool addShipment(Shipment* newShipment);
    bool addDiseaseType(DiseaseType* newDiseaseIntoList);
    bool addSupplyType(SupplyType* newSupplyType);
    bool receiveShipment(Shipment* theShipment);//ToDo:find out what this is supposed to actually do
    bool checkForExistingSupply(Supply *aSupply);
    bool checkForDiseaseCase(DiseaseCase * diseaseCase);
    bool checkforExistingShipment(Shipment *aShipment);
    bool checkforExistingDiseaseType(DiseaseType *aDiseaseType);
    bool checkforExistingSupplyType(SupplyType *aSupplyType);
    bool adjustSupply(Supply* aSupply);


    //Search Functions
    QList<Supply*>* search(SupplyCriteria criteria);
    QList<DiseaseCase*>* search(DiseaseCriteria criteria);
    QList<Shipment*>*    search(ShipmentCriteria criteria);


    // return the diseaseListNames in a getfunction
    QStringList getDiseaseListName();
    QStringList getSupplyTypeListName();
    QStringList getRegionNames();
    QStringList getCities();
    QStringList getProvinces();
    QStringList getCitiesByProvince( const QString &name );
    DiseaseType *getDiseaseTypeByID( int id );
    DiseaseType *getDiseaseTypeByName( const QString &id );
    SupplyType *getSupplyTypeByID(int id);
    SupplyType *getSupplyTypeByName(QString aSupplyName);
    QString getCityByName(QString name );
    City *getCityByGeo( float lon, float lat );
    City *getSupplyByGeo( float lon, float lat );
    bool getCityByName(QString name,City* cityPtr);
    City *getCity(const QString &name);
    int getDiseaseTypeID( const QString &id );
    Supply *getSupplyByID(int id);
    QString getSupplyNameByID(int id);

    Shipment *getShipmentByID(const int &id);

    float getLonitude( const QString &name );
    float getLatitude( const QString &name );
    QList<int> getShipmentID();
    QList<int> getShipmentType();
    QList<int> getShipmentQuantity();
    QList<City*>* getCities(QList<City*>* returnPtr);
    QList<Supply*> getSupplies();
    QList<int> getSupplyID();
    QList<SupplyType*>* getSupplyTypes();
    QList<DiseaseType*>* getDiseaseTypes();
    City* findCity(float lon,float lat);
    QList<Shipment*> getShipments();
    int getRevNum();
    void setRevNum(int number);

private:
    // help sorting by alphabetical order
    bool sortHelper( const QString &s1, const QString &s2 );

    bool updateShipment(Shipment* aShipment);
    bool updateDiseaseType(DiseaseType *aDiseaseType);
    bool updateSupplyType(SupplyType *aSupplyType);
    bool changeDiseaseCase(DiseaseCase* aCase);

    // following functions are reading information from files and store them in containers
    void readCities( const QString &fileName );
    QStringList cities;
    void readSupplyType( const QString &fileName );
    QStringList supplyTypes;
    void readDiseaseType( const QString &fileName );
    QStringList diseaseTypes;


    /// COMMENT OUT QList<QList> dataLists, since the compiler says it's not a type
    //QList<QList> dataLists;
    QList<DiseaseType*> diseaseTypeList;
    QList<SupplyType*> supplyTypeList;
    QList<DiseaseCase*> diseaseCaseList;
    QList<Shipment*> shipmentList;
    QList<Supply*> supplyList;
    QList<City*> cityList;

    DiseaseType *dType; // create a type for creating objects read from file
    SupplyType *sType; // create a type for creating objects read from file
    City *cType; // create a typr for creating city objects read from file
    City *aCity;

    QMultiMap<QString, QString> listMap;

    int revNum;

};

#endif  //_LISTCONTAINER_H
